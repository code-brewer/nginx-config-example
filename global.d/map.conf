# Map Module: http://wiki.nginx.org/HttpMapModule
#
# Maps translate a source string to an output variable and are
# lazy-evaluated, only generating the answer when the output variable is
# referenced.  They are preferred over set/if/set sequences.


# Generate $binary_remote_net from first part of $binary_remote_addr.

map $binary_remote_addr $binary_remote_net {
    "~^(?P<net>...).$"              $net;  # IPv4 /24 is first 3 of 4 byte (32-bit) number.
    "~^(?P<net>........)........$"  $net;  # IPv6 /64 is first 8 of 16 byte (128-bit) number.
    default                         $binary_remote_addr;  # Should never happen. Return IP.
}


# For include/cookies-only, decide action to take: [r]edirect, [p]ass, [f]ail.

map "$cookie_u|$arg_cookietest" $cookietest_action {
    |           r;      # No cookie, no arg.
    ~^[^|]      p;      # Cookie.
    default     f;      # No cookie, arg.
}


# For include/response-headers, generate $x_frame_options
map $x_frame_options_override $x_frame_options {
    ""       "";                          # Allow iframing by default.
    ALLOW    "";                          # Delete header if set to ALLOW.
    default  $x_frame_options_override;   # Otherwise use supplied value.
}


# Only pass through "Connection: Upgrade" if websockets are enabled.
map "$websockets_override|$http_connection" $x_connection {
    ""             "";
    ALLOW|Upgrade  $http_connection;
}

# Only pass through "Upgrade: websocket" if websockets are enabled.
map "$websockets_override|$http_upgrade" $x_upgrade {
    ""               "";
    ALLOW|websocket  $http_upgrade;
}

# Classify User-Agent into [b]ot/[t]est/[u]ser/[o]ther.  Use the longest
# possible unconditional substrings and keep this to under a few dozen
# regexs.

map $http_user_agent $user_agent_class {
    # Feed readers
    ~[fF]eed		f;
    ~[nN]ews		f;
    ~[bB]log		f;
    ~*rss		f;
    ~Apple-PubSub	f;

    # Bots 
    ~[bB]ot\b		b;
    ~[cC]rawler\b	b;
    ~[sS]pider\b	b;
    "~Yahoo! Slurp"	b;
    ~ia_archiver	b;

    # Monitoring test traffic
    ~nagios-plugins	t;
    ~Pingdom\.com	t;
    ~HealthChecker	t;

    # Users on browsers
    "~ MSIE "		u;
    ~Gecko		u;
    ~Safari/		u;
    ~Opera		u;

    # Other
    default		o;
}


# Does User-agent claim to be a mobile device?

map $http_user_agent $is_mobile {
    # iPad claims to be mobile, but we disagree.
    ~\biPad\b		n;

    ~Mobile		y;
    default		n;
}


# Parse Accept header for most-preferred mime type string, which will be the
# first one mentioned without a score or with a score of 1.0.  Failing that,
# use first mentioned.  Failing that, return "unknown/unknown";

map $http_accept $first_http_accept {
    ""						"";
    */*						*/*;
    "~\b(?P<type>[a-z]+/[a-z*-]+)(,|;\s*q=1|$)"	$type;
    "~\b(?P<type>[a-z*]+/[a-z*-]+)\b"		$type;
    default					unknown/unknown;
}


# Parse first mime-type mentioned in Accept into [e]mpty, [w]ildcard,
# [h]tml, [i]mage, [c]ss, [j]avascript, jso[n], [t]ext, [a]pplication, or
# [o]ther.  Use the longest possible unconditional substrings and keep this
# to under a few dozen regexs.

map $first_http_accept $prefer_mime_type {
    ""				e;
    */*				w;
    application/javascript	j;
    application/json		n;
    application/x-thrift    r;
    application/x-thrift-compact  f;
    image/jpeg			i;
    image/png			i;
    text/css			c;
    text/html			h;
    text/javascript		j;
    ~^application/		a;
    ~^text/			t;
    ~^image/			i;
    default			o;
}


# Generate a canonical Accept header suitable for passing to Ruby apps based
# on preferred mime-type.

map $prefer_mime_type $canonical_accept {
    h        "text/html,application/xhtml+xml,*/*;q=0.1";
    c        "text/css,*/*;q=0.1";
    n        "application/json";  # Adding "*/*" here results in 405 errors.
    r        "application/x-thrift";
    f        "application/x-thrift-compact";
    j	     "text/javascript,application/javascript,*/*;q=0.1";
    i	     "image/jpg,image/png,image/gif,*/*;q=0.1";
    default  "*/*";
}


# Parse first two-letter language mentioned in Accept-Language (such as
# "en") or return [_e]mpty, [_w]ildcard, or [_o]ther status.

map $http_accept_language $prefer_language {
    ""				_e;
    ~*^(?P<lang>[a-z][a-z])\b	$lang;
    ~^\*			_w;
    default                     _o;
}


# Remove everything through first dot in $host.

map $host $domain_from_host {
    ~*^[^.]*\.(?P<domain>[a-z0-9-.]+\.[a-z]+)$  $domain;
    default                                     unknown;
}
