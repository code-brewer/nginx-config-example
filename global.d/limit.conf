# Nginx's DoS protection is fast, but not very flexible.  You can't really
# track request rate-limits or connection counts separately per upstream
# service; they are global to the proxy.  The only real flexibility comes
# from which connections are grouped together into a "bucket", and the
# limits are global to all connections in the bucket.
#
# limit_req implements a "leaky bucket" model.  Each bucket holds at most
# <burst> tokens and starts out empty.  One token added to the bucket per
# request, and tokens leak out of the bucket at fixed <rate>.  If the bucket
# is full, the bucket is unchanged and requests are answered with 503.  No
# tokens leak out of the bucket when it is empty.
#
# A bucket key can be defined as basically any string, but you don't want to
# use a string that is under control of an attacker.  We limit ourselves to
# IP address and MaxMind's idea of country for that IP.  The goal is to make
# as close as possible to one bucket available to an attacker with limited
# resources, while not putting too many real users in the same bucket.  We
# can also exempt IPs that we trust from being limited at all.
#
# Limit types:
#     i: exempt from limits, internal IPs owned by us.
#     e: exempt from limits, not owned by us.
#     i: bucketed by individual IP.
#     n: bucketed by /24 network.
#     c: bucketed by country code.
#     a: abusive IPs, put in one shared bucket.
#
# $x_limit_type checks $x_limit_type_ip, and if it returns "", then it
# checks $x_limit_type_country.  $x_limit_bucket then takes the type and
# returns the appropriate key identifying a unique bucket.


# $x_limit_type_ip: If an IP is listed, return limit type. Otherwise,
# return "" to allow pass-through to country.  This is implemented using the
# IP optimized "geo" map, which can handle a large number (100,000+) of
# entries efficiently, but can't return variables.

geo $x_limit_type_ip {
    ## Exempt all internal IPs:

    127.0.0.0/8             i;  # Localhost

    192.168.0.0/16          i;  # Local net
    172.16.0.0/12           i;
    10.0.0.0/8              i;

    #198.51.100.0/24;       i;  # Our own servers
    #2001:db0:0::/48;


    ## Exempt web crawlers that we care about:

    # Google's web crawler IP range:
    66.249.64.0/19          e;

    # And msnbot:
    65.55.213.0/24          e;
    199.30.26.0/24          e;


    ## None of the above:

    # If no match, must return "":
    default                 "";
}


# Do MaxMind GeoIP lookup on country, see if we specify a limit type for
# it, and if not return "".  Only called when the IP lookup returns "".

map $geoip_city_country_code $x_limit_type_country {
    # Anonymous proxies are MaxMind country code "A1".  See
    # http://www.maxmind.com/app/iso3166 for full list.
    A1      c;

    # High-risk botnet countries.  See:
    # http://www.team-cymru.org/Monitoring/Graphs/
    BR      c;
    CN      c;
    ID      c;
    IN      c;
    IT      c;
    NG      c;
    PK      c;
    RO      c;
    RU      c;
    TH      c;
    TR      c;
    UA      c;
    VN      c;

    # If no match, must return "":
    default "";
}


# $x_limit_type: Simple if/then/else-style map.  Check $x_limit_type_ip
# first.  If it returns "", check $x_limit_type_country.

map $x_limit_type_ip $x_limit_type {
    ""      $x_limit_type_country;
    default $x_limit_type_ip;
}


# $x_limit_bucket: Translate $x_limit_type into a very short key
# identifying bucket which shares connection/request limits with all other
# connections in the same bucket.  The key "" is special and means "don't
# limit at all".

map $x_limit_type $x_limit_bucket {
    i       "";                        # t: Exempt internal IPs skip limits.
    e       "";                        # e: Exempt external IPs skip limits.
    s       $binary_remote_addr;       # i: Use the single IP address.
    n       $binary_remote_net;        # n: Use the /24 (from include/map).
    c       $geoip_city_country_code;  # c: Country code as name.
    a       "a";                       # a: Abusive IPs share one bucket ("a").

    default $binary_remote_net;        # No matches, default to bucketing by /24.
}


# By default, allow 500 requests at any speed plus 30 requests per minute
# over an extended period.  Exceeding that throws 429s, with no attempt to
# delay.  "10m" (10 megabytes) can support ~160000 buckets.

limit_req_status 429;
limit_req_zone $x_limit_bucket zone=limit_buckets:10m rate=30r/m;
limit_req zone=limit_buckets burst=500 nodelay;


# $x_write_limit_bucket: Only rate-limit if $request_method is not GET or
# HEAD.

map $request_method $x_write_limit_bucket {
    GET		"";
    HEAD	"";
    default	$x_limit_bucket;
}


# We also seperately rate-limit non-GET/HEAD to 50 requests at any speed
# plus 2 requests per minute.  Exceeding that throws 429s, with no attempt
# to delay.  "10m" (10 megabytes) can support ~160000 buckets.

limit_req_zone $x_write_limit_bucket zone=write_limit_buckets:10m rate=2r/m;
limit_req zone=write_limit_buckets burst=50 nodelay;
