# Main Module: http://wiki.nginx.org/NginxHttpMainModule

user              nginx;

pid        /var/run/nginx.pid;
error_log  /var/log/nginx/error.log;

# How many child processes to spawn to handle requests.  Should at least be
# number of non-HT cores available.
worker_processes auto;

# For safety, make sure the kernel allows us to use at least
# worker_processes * worker_connections * 2 + 100 filedescriptors.
worker_rlimit_nofile 262144;

# Events Module: http://wiki.nginx.org/NginxHttpEventsModule

events {
    # epoll is the scalable Linux event mechanism.  Die if we can't use it.
    use epoll;

    # Total allowed connections is worker_processes * worker_connections.
    # Expect to run into problems at 60-70% of that; accept() mutex load
    # balancing isn't perfect.
    worker_connections 65536;

    # Avoid thundering herd on accept(). One worker accept()s as fast as it
    # can for 20ms, then all workers wake up and try to take mutex.
    multi_accept on;
    accept_mutex on;
    accept_mutex_delay 20ms;
}


# HTTP Core Module: http://wiki.nginx.org/NginxHttpCoreModule 

http {
    # Don't mention which NginX version we are running in responses.
    server_tokens off;

    # Which DNS resolvers to use for outbound HTTP connections.
    # "172.16.0.23" is Amazon's "Magic" DNS server.
    resolver 172.16.0.23;
    resolver_timeout 5s;

    # Disable nagle and try to coalesce TCP packets.
    tcp_nodelay    on;
    tcp_nopush     on;

    # Send large chunks of local files without copying to userspace.
    sendfile           on;
    sendfile_max_chunk 1m;

    # Don't let a client get crazy with Range headers.
    max_ranges 10;

    # Allow connections to stay open after a response in case the client
    # wants to send another request.  Claim to allow 4 minutes (NAT devices
    # commonly timeout in 5 min), actually allow an extra 5 seconds just in
    # case.
    keepalive_timeout 245 240;

    # Chrome preconnects to servers it thinks it might use soon.  Match
    # keepalive_timeout here.  This is total time to wait for complete
    # headers.
    client_header_timeout 4m;

    # How long do we wait for another packet of the request body to arrive?
    client_body_timeout   20s;

    # Allow POSTs of 10 megs.
    client_max_body_size  10m;

    # How long do we wait for another 4k of the response to be ACKed?
    send_timeout          20s;

    # If we timeout an incomplete response, skip FIN_WAIT1 and send RST.
    reset_timedout_connection on;

    # Don't send port numbers for odd ports.
    port_in_redirect off;

    # Default filename when URI specifies a directory.
    index index.html;

    # Allow more server_names than default limit.
    server_names_hash_max_size 4096;
    server_names_hash_bucket_size 512;

    # Allow larger maps than default.
    map_hash_max_size 2048;
    map_hash_bucket_size 128;

    # Allow more variables than default.
    variables_hash_max_size 1024;
    variables_hash_bucket_size 128;

    # Where to store tempfiles.
    client_body_temp_path /mnt/nginx_client_temp 1 2;
    proxy_temp_path /mnt/nginx_proxy_temp 1 2;
    fastcgi_temp_path /mnt/nginx_fastcgi_temp 1 2;

    # Set up cache. (25 meg RAM = ~195,000 objects.)
    proxy_cache_path /mnt/nginx_proxy_cache keys_zone=on:25m max_size=20g levels=1:2 inactive=1d;

    # Define a fast rate-limit bucket for use in acl/deny-all and include/static-assets.
    limit_req_zone $binary_remote_net zone=fast_limit_buckets:10m rate=100r/s;

    # Load global config from global.d/.
    include global.d/*.conf;

    # Load per-site config from sites.d/.
    include sites.d/*.conf;
}
